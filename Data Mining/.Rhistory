departure.delays <- by(flights$dep_delay, flights$month, function(x) mean(x, na.rm=T))
barplot(departure.delays, xlab='Month', ylab='Minutes', main='Mean Departure Delays')
### 3. EDA
# a) (4 pt) Plot a histogram of the total air flight time with 100 breaks. (look at the help for
# hist()). How many peaks do you see in this distribution? What is an explanation for this?
# ...
hist(flights$air_time, breaks=100)
#..
hist(flights$dep_time[!is.na(flights$dep_time)], main="Dep Times No NA")
#..
hist(flights$dep_time[!is.na(flights$dep_time),breaks=100], main="Dep Times No NA")
#..
hist(flights$dep_time[!is.na(flights$dep_time)],breaks=100, main="Dep Times No NA")
#..
hist(flights$dep_time[!is.na(flights$dep_time)], main="Dep Times No NA")
hist(flights$dep_time[flights$dep_time], main="Dep Times No NA")
Mode <- function(x) {
ux <- unique(x)
ux <- ux[!is.na(ux)]
ux[which.max(tabulate(match(x, ux)))]
}
Mode(flights$air_time)
Mode(flights$dep_time)
hist(flights$dep_time[flights$dep_time], main="Dep Times No NA")
flights[is.na(dep_time), sched_dep_time]
head(flights[is.na(dep_time), .(Scheduled=sched_dep_time, Departed=dep_time)]
)
nrow(flights[is.na(dep_time), .(Scheduled=sched_dep_time, Departed=dep_time)])
nrow(flights)
summary(flights$dep_time)
summary(flights$sched_dep_time)
## Make new DepField
flights$DepField <- flights$dep_time
flights$DepField[is.na(DepField)] <- flights$sched_dep_time
flights$DepField[is.na(flights$DepField)] <- flights$sched_dep_time
flights$DepField[is.na(flights$DepField)] <- flights$sched_dep_time[is.na(flights$dep_time)]
sum(is.na(flights$DepField)
)
flights[,.(dep_time, sched_dep_time, DepField)]
df <- data.frame(a=1:5, b=c('a',NA, 'c','d',NA))
df
df <- data.table(df)
df[is.na(b)]
df[is.na(b)]$b <- df$a
df
df <- data.frame(a=1:5, b=c('a',NA, 'c','d',NA))
df <- data.table(data.frame(a=1:5, b=c('a',NA, 'c','d',NA)))
df
df[is.na(b)]
df[is.na(b)]$a
df[is.na(b)]$b #<- df[is.na(b)]$a
df$c <- 1:5
df
df$c
df$c <- rep(NA, 5)
df
df$c[1] <- 'a'
df
df$c[is.na(c)]
df$c[is.na(b)]
df$[is.na(c)]
df[is.na(c)]
df[is.na(c)]$c <- df[is.na(c)]$a
df
df$lets <- LETTERS[1:5]
df[is.na(b)]$b <- df[is.na(b)]$lets
df
## Make new DepField
flights$DepField <- flights$dep_time
flights[is.na(flights$dep_time)]$DepField <- flights[is.na(flights$dep_time)]$sched_dep_time
flights[,.(dep_time, sched_dep_time, DepField)]
flights[is.na(flights$dep_time)]$DepField
flights$DepField[is.na(flights$dep_time)]
## Make new DepField
flights$DepField <- flights$dep_time
flights$DepField[is.na(flights$dep_time)] <- flights$sched_dep_time[is.na(flights$dep_time)]
flights$DepField[is.na(flights$dep_time)] <- flights[is.na(flights$dep_time)]$sched_dep_time
hist(flights$DepField, main="Departure Times")
#..
hist(flights$dep_time[!is.na(flights$dep_time)], main="Dep Times No NA")
Mode(flights$DepField)
Mode(flights$dep_time)
Mode(flights$DepField) # different 755
Mode(flights$sched_dep_time)
#..
hist(flights$dep_time[!is.na(flights$dep_time)], main="Dep Times No NA")
hist(flights$dep_time[flights$dep_time], main="Dep Times")
hist(flights$dep_time, main="Dep Times")
#..
hist(flights$dep_time[!is.na(dep_time)], main="Dep Times No NA")
is.data.table(flights)
#..
hist(flights$dep_time[!is.na(dep_time)], main="Dep Times No NA")
hist(flights$dep_time, main="Dep Times")
#..
hist(flights[!is.na(dep_time)]$dep_time, main="Dep Times No NA")
hist(flights$dep_time, main="Dep Times")
tbl <- table(flights$dep_time)
tbl
help(library)
# ...
hist(flights$air_time, breaks=100)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(flights$dep_delay)
help(boxplot)
names(flights)
head(flights)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights)
plot(x=hour, y=dep_delay, data=flights)
plot(x=flights$hour, y=flights$dep_delay)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay < 200)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay < 200])
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay < 100])
summary(flights$dep_delay)
plot(mod3)
for (pkg in c('data.table', 'nycflights13')) {
if(!(pkg %in% rownames(installed.packages()))) {
install.packages(pkg)
}
}
library(data.table)
library(nycflights13) # Load flights library
data(flights) # load data on flights
flights <- data.table(flights) # Put it in a data.table for ease of EDA
# New York airports include: JFK, LGA or EWR
# Origin airports in the data include only these, so all flights are from New York. None to.
nrow(flights) #336776
# Let's count flights with Seattle destination
sea.flights <- flights[dest=='SEA']
nrow(sea.flights) #3923
# c) (2 pt) How many airlines fly from NYC to Seattle? Hint: look at the function unique()
length(unique(sea.flights$carrier)) # 5
# d) (2 pt) What is the average arrival delay for flights from NYC to Seattle?
sea.flights[, .(Avg.ArrivalDelay=mean(arr_delay,na.rm=T)) ] # -1.099
# Mean arrival delay time: 6.89 minutes
mean(flights$arr_delay, na.rm=T)
# Median arrival delay time: -5 minutes
median(flights$arr_delay, na.rm=T)
# A mean of 6.89 minutes and a median of -5 minutes seems consistent with this histogram
# because is is skewed right, so there are large outliers.
hist(flights$arr_delay)
# There is a significant dip in departure delays during Sep, Oct, and Nov (the minimum). But it peaks in July.
# It could be because fewer people board flights during the Fall, but more in the Summer for vacation.
#months <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')
departure.delays <- by(flights$dep_delay, flights$month, function(x) mean(x, na.rm=T))
barplot(departure.delays, xlab='Month', ylab='Minutes', main='Mean Departure Delays')
# I see several peaks in this distribution, possibly five. These might be explained by common trips to
# cities at different distances from NYC.
# The 30-40 minute trips might be to Boston, 2hr trips to Chicago, 5-6hr trips to Seattle
hist(flights$air_time, breaks=100)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay < 100])
# Richard McGovern
# INFX 573: Data Science I
# Assignment 2
#
# WRITE UP HERE OR IN SEPARATE DOCUMENT?
# Install needed packages if necessary
for (pkg in c('data.table', 'nycflights13')) {
if(!(pkg %in% rownames(installed.packages()))) {
install.packages(pkg)
}
}
library(data.table)
library(nycflights13) # Load flights library
data(flights) # load data on flights
flights <- data.table(flights) # Put it in a data.table for ease of EDA
### [1] Letâ€™s explore flights from NYC to Seattle. Use the flights dataset to answer the following
# questions.
# a) (2 pt) How many flights were there to and from NYC in 2013?
# New York airports include: JFK, LGA or EWR
# Origin airports in the data include only these, so all flights are from New York. None to.
nrow(flights) #336776
# b) (2 pt) How many flights were there from NYC airports to Seattle (SEA) in 2013?
# Let's count flights with Seattle destination
sea.flights <- flights[dest=='SEA']
nrow(sea.flights) #3923
# c) (2 pt) How many airlines fly from NYC to Seattle? Hint: look at the function unique()
length(unique(sea.flights$carrier)) # 5
# d) (2 pt) What is the average arrival delay for flights from NYC to Seattle?
sea.flights[, .(Avg.ArrivalDelay=mean(arr_delay,na.rm=T)) ] # -1.099
# Perhaps this means on average, flights to Seattle arrived about a minute early.
### 2. Flights are often delayed. Consider the following questions exploring delay patterns.
# a) (4 pt) What is the mean arrival delay time? What is the median arrival delay time?
# Mean arrival delay time: 6.89 minutes
mean(flights$arr_delay, na.rm=T)
# Median arrival delay time: -5 minutes
median(flights$arr_delay, na.rm=T)
# b) (2 pt) What does a negative arrival delay mean?
# I interpret negative arrival delay to mean that the flight arrived early by that much time.
# c) (4 pt) Plot a histogram of arrival delay times. Does the answers you obtained in (a)
# consistent with the shape of the delay time distribution?
# A mean of 6.89 minutes and a median of -5 minutes seems consistent with this histogram
# because is is skewed right, so there are large outliers.
hist(flights$arr_delay)
# d) (4 pt) Is there seasonality in departure delays? Try
# by(flights$dep_delay, flights$month, function(x) mean(x, na.rm=T))
# and describe what patterns you see. Is there a best month to leave New York? A worst?
# Why might this be?
# There is a significant dip in departure delays during Sep, Oct, and Nov (the minimum). But it peaks in July.
# It could be because fewer people board flights during the Fall, but more in the Summer for vacation.
#months <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')
departure.delays <- by(flights$dep_delay, flights$month, function(x) mean(x, na.rm=T))
barplot(departure.delays, xlab='Month', ylab='Minutes', main='Mean Departure Delays')
### 3. EDA
# a) (4 pt) Plot a histogram of the total air flight time with 100 breaks. (look at the help for
# hist()). How many peaks do you see in this distribution? What is an explanation for this?
# I see several peaks in this distribution, possibly five. These might be explained by common trips to
# cities at different distances from NYC.
# The 30-40 minute trips might be to Boston, 2hr trips to Chicago, 5-6hr trips to Seattle
hist(flights$air_time, breaks=100)
# b) (4 pt) What time of day do flights most commonly depart? Why might there be two most
# popular times of day to depart?
#..
hist(flights[!is.na(dep_time)]$dep_time, main="Dep Times No NA")
hist(flights$dep_time, main="Dep Times")
tbl <- table(flights$dep_time)
tbl
# Write my own Mode function that removes missing values before counting them.
Mode <- function(x) {
ux <- unique(x)
ux <- ux[!is.na(ux)] # Remove NA's
ux[which.max(tabulate(match(x, ux)))]
}
## Make new Departure Time field with the scheduled time when the actual departure time is missing
flights$DepField <- flights$dep_time
flights[is.na(flights$dep_time)]$DepField <- flights[is.na(flights$dep_time)]$sched_dep_time
flights[,.(dep_time, sched_dep_time, DepField)]
hist(flights$DepField, main="Departure Times")
Mode(flights$dep_time)
Mode(flights$DepField) # different 755
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay < 100])
### 4. (10 pt) Develop one research question you can address using the nycflights2013 dataset.
# Provide two visualizations to support your exploration of this question. Discuss what you find.
Mode(flights$dep_time)
Mode(flights$DepField) # different 755
hist(flights$dep_time)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay < 100])
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay > 100)
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay > 100])
# c) (4 pt) Plot a box plot of departure delays and hour of departure. What pattern do you
# see? What is an explanation for this?
boxplot(dep_delay ~ hour, data=flights[dep_delay < 100])
# installation is required only required once and is rememberd across sessions
install.packages('XML')
library(XML)
# initialize a storage variable for Twitter tweets
mydata.vectors <- character(0)
# paginate to get more tweets
for (page in c(1:15))
for (page in c(1:15))
{
# search parameter
twitter_q <- URLencode('#prolife OR #prochoice')
# construct a URL
twitter_url = paste('http://search.twitter.com/search.atom?q=', twitter_q,
'&rpp=100&page=', page, sep='')
# fetch remote URL and parse
mydata.xml <- xmlParseDoc(twitter_url, asText=F)
# extract the titles
mydata.vector <- xpathSApply(mydata.xml, '//s:entry/s:title', xmlValue,
namespaces =c('s'='http://www.w3.org/2005/Atom'))
# aggregate new tweets with previous tweets
mydata.vectors <- c(mydata.vector, mydata.vectors)
}
twitter_q <- URLencode('#prolife OR #prochoice')
twitter_q
twitter_url
installed.packages()
names(installed.packages())
pkg <- installed.packages()
str(pkg)
is.list(pkg)
typeof(pkg)
is.vector(pkg)
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/Twitter Text Data Mining.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/Twitter Text Data Mining.R')
library(twitteR)
library(ROAuth)
library(httr)
api_key <- "lOlR9FH6BcSg6gSHOcGGQ0O6C"
api_secret <- "ZEsYJT8e8tuXQzGzcKlTVZlIbtdGlTMQJUem0WkOQ7MyO9hfLb"
access_token <- "963526303025577985-8wDyQMk2hcMfnipMmag6s9cuikq7KLM"
access_token_secret <- "VkTHXXvrTe9823qFYtMvBFNnELxyzWM7C7KBMOpPuS8bu"
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
# You are in.
# Grab latest tweets
tweets_sanders <- searchTwitter('@BernieSanders', n=1500)
# Loop over tweets and extract text
library(plyr)
feed_sanders = laply(tweets_sanders, function(t) t$getText())
yay = scan('opinion-lexicon-English/positive-words.txt',
what='character', comment.char=';')
boo = scan('opinion-lexicon-English/negative-words.txt',
what='character', comment.char=';')
# Add a few twitter-specific negative phrases
bad_text = c(boo, 'wtf', 'epicfail', 'douchebag')
good_text = c(yay, 'upgrade', ':)', '#iVoted', 'voted')
readClipboard()
######## Set working directory
setwd("C:\\Users\\Richard\\Desktop\\DS1_Research\\Data Mining")
# Hu and Liu opinion lexicon 5000 words
# Unpack it
# Read in dictionary of positive and negative works
yay = scan('opinion-lexicon-English/positive-words.txt',
what='character', comment.char=';')
boo = scan('opinion-lexicon-English/negative-words.txt',
what='character', comment.char=';')
# Add a few twitter-specific negative phrases
bad_text = c(boo, 'wtf', 'epicfail', 'douchebag')
good_text = c(yay, 'upgrade', ':)', '#iVoted', 'voted')
library(stringr)
score.sentiment = function(sentences, good_text, bad_text, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, good_text, bad_text) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\d+', '', sentence)
#to remove emojis
sentence <- iconv(sentence, 'UTF-8', 'ASCII')
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, good_text)
neg.matches = match(words, bad_text)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, good_text, bad_text, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
score.sentiment = function(sentences, good_text, bad_text, .progress='none') {
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, good_text, bad_text) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\d+', '', sentence)
#to remove emojis
sentence <- iconv(sentence, 'UTF-8', 'ASCII')
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, good_text)
neg.matches = match(words, bad_text)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, good_text, bad_text, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
print('hi')
help(gsub)
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/Twitter Text Data Mining.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/Twitter Text Data Mining.R')
traceback()
options(show.error.locations = TRUE)
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/Twitter Text Data Mining.R')
head(feed_sanders)
is.vector(feed_sanders)
sentences <- feed_sanders
s1 <- sentences[1]
s1
strsplit(s1, "\\xed")
unlist(strsplit(s1, "\\xed"))
length(unlist(strsplit(s1, "\\xed")))
mys <- "Hi! This is Richard. It's nice to meet you."
gsub('[[:punct:]]', '', mys)
gsub('[[:cntrl:]]', '', mys)
gsub('[[:cntrl:]]', '', "@#$%^& hi &*()")
gsub('[[:cntrl:]]', '', "@#$%^& hi &*()1234")
gsub('\\d+', '', "@#$%^& hi &*()1234")
gsub('\d+', '', "@#$%^& hi &*()1234")
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
print(log(1))
log(3)        #
log(e)        #
log(exp(1))        #
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
log('hi')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
sentence
traceback()
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
traceback()
removeNumbers <- function(sentence) {
return(gsub('\d+', '', sentence))
}
traceback()
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/test.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/Twitter Text Data Mining.R')
source('C:/Users/Richard/Desktop/DS1_Research/Data Mining/Twitter Text Data Mining.R')
head(feelthabern)
names(feelthabern)
summary(feelthabern$score)
table(feelthabern$score)
# Call the function and return a data frame
feelthabern <- score.sentiment(feed_sanders, good_text, bad_text, .progress='text')
# Cut the text, just gets in the way
plotdat <- feelthabern[c("name", "score")]
# Remove neutral values of 0
plotdat <- plotdat[!plotdat$score == 0, ]
# Nice little quick plot
qplot(factor(score), data=plotdat, geom="bar",
fill=factor(name),
xlab = "Sentiment Score")
# Call the function and return a data frame
feelthabern <- score.sentiment(feed_sanders, good_text, bad_text, .progress='text')
# Cut the text, just gets in the way
plotdat <- feelthabern#[c("name", "score")]
# Remove neutral values of 0
plotdat <- plotdat[!plotdat$score == 0, ]
# Nice little quick plot
qplot(factor(score), data=plotdat, geom="bar",
fill=factor(name),
xlab = "Sentiment Score")
# Call the function and return a data frame
feelthabern <- score.sentiment(feed_sanders, good_text, bad_text, .progress='text')
# Cut the text, just gets in the way
plotdat <- feelthabern#[c("name", "score")]
# Remove neutral values of 0
plotdat <- plotdat[!plotdat$score == 0, ]
# Nice little quick plot
qplot(factor(score), data=plotdat, geom="bar",
xlab = "Sentiment Score")
library(ggplot2)
# Call the function and return a data frame
feelthabern <- score.sentiment(feed_sanders, good_text, bad_text, .progress='text')
# Cut the text, just gets in the way
plotdat <- feelthabern#[c("name", "score")]
# Remove neutral values of 0
plotdat <- plotdat[!plotdat$score == 0, ]
# Nice little quick plot
qplot(factor(score), data=plotdat, geom="bar",
xlab = "Sentiment Score")
